apiVersion: v1
kind: Pod
metadata:
  annotations:
    # checksum/config: eb9e003c79fc9d08807e1465df1115d9b02b2ce5f14c3d667f127b79ab5fdff5
    # checksum/sharding_config: d95c49d06912d95365a3306c65671f5d4dc9cb26d6e962682112ed8dc23b8ee5
    prometheus.io/path: /metrics
    prometheus.io/port: "2112"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: scaffold
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rekor
    helm.sh/chart: rekor-1.0.3
    pod-template-hash: 5c755b56f9
  name: rekor-server
  namespace: rekor-system
spec:
  containers:
    - args:
        - serve
        - --trillian_log_server.address=trillian-logserver
        - --trillian_log_server.port=8091
        - --trillian_log_server.sharding_config=/sharding/sharding-config.yaml
        - --redis_server.address=rekor-redis
        - --redis_server.port=6379
        - --rekor_server.address=0.0.0.0
        - --rekor_server.signer=memory
        - --enable_retrieve_api=true
        - --trillian_log_server.tlog_id={{ trillian_tree_id }}
        - --enable_attestation_storage
        - --attestation_storage_bucket=file:///var/run/attestations
      image: gcr.io/projectsigstore/rekor-server@sha256:f7e6975041b9b6f3afdc7d6a1a87de43098ce8d83eb1958ea097ebfcb5537658
      imagePullPolicy: IfNotPresent
      ## Healthchecks cannot run in distroless containers
      # livenessProbe:
      #   failureThreshold: 3
      #   httpGet:
      #     path: /ping
      #     port: 3000
      #     scheme: HTTP
      #   initialDelaySeconds: 30
      #   periodSeconds: 10
      #   successThreshold: 1
      #   timeoutSeconds: 1
      name: rekor-server
      ports:
        - containerPort: 3000
          protocol: TCP
        - containerPort: 2112
          protocol: TCP
      ## Healthchecks cannot run in distroless containers
      # readinessProbe:
      #   failureThreshold: 3
      #   httpGet:
      #     path: /ping
      #     port: 3000
      #     scheme: HTTP
      #   initialDelaySeconds: 10
      #   periodSeconds: 10
      #   successThreshold: 1
      #   timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /sharding
          name: rekor-sharding-config
        - mountPath: /var/run/attestations
          name: storage
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  initContainers:
    - command:
        - sh
        - -c
        - until curl --max-time 10 http://trillian-logserver:8090; do echo waiting for trillian-logserver; sleep 5; done;
      image: docker.io/curlimages/curl@sha256:dca6e1b1c8e7b8b8e7be4e79fc78a858d12fd56245cb31bfa281dbf7c73a6498
      imagePullPolicy: IfNotPresent
      name: wait-for-trillian-log-server
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
  nodeName: minikube
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  # Needs to be set until https://github.com/containers/podman/pull/16698 is downsteamed
  restartPolicy: OnFailure
  schedulerName: default-scheduler
  securityContext:
    runAsNonRoot: true
    runAsUser: 65533
  serviceAccount: rekor-server
  serviceAccountName: rekor-server
  terminationGracePeriodSeconds: 30
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - configMap:
        defaultMode: 420
        name: rekor-sharding-config
      name: rekor-sharding-config
    - name: storage
      persistentVolumeClaim:
        claimName: rekor-server